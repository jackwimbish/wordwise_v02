import uuid
from sqlalchemy import (
    Column,
    String,
    Text,
    ForeignKey,
    TIMESTAMP,
    Integer,
    func,
    UniqueConstraint
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

from .database import Base

# NOTE: A new row is automatically added to this table upon user signup
# via a PostgreSQL trigger. The function and trigger definitions can be
# found in: /backend/sql/funcs_triggers.sql
class Profile(Base):
    """
    Stores public user data that is application-specific.
    Has a one-to-one relationship with Supabase's auth.users table,
    linked by the `id` column.
    """
    __tablename__ = "profiles"

    # We use the same UUID as the auth.users table for a clean join.
    # This is NOT auto-generated by the database, but provided from the
    # JWT's 'sub' claim when a profile is created.
    id = Column(UUID(as_uuid=True), primary_key=True)

    display_name = Column(String(255))
    email = Column(String(255), unique=True, index=True)
    created_at = Column(
        TIMESTAMP(timezone=True), server_default=func.now(), nullable=False
    )
    
    # Rate limiting columns
    api_call_count = Column(Integer, default=0, nullable=False)
    rate_limit_reset_at = Column(TIMESTAMP(timezone=True), nullable=True)

    # A profile can have many documents. The 'documents' attribute on a Profile
    # instance will be a list of Document objects.
    documents = relationship(
        "Document",
        back_populates="profile",
        cascade="all, delete-orphan",
        lazy="selectin"
    )

class Document(Base):
    """
    Represents a single document written by a user.
    """
    __tablename__ = "documents"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)

    # Foreign key to our new profiles table.
    profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey("profiles.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )

    title = Column(String(255), default="Untitled Document")
    content = Column(Text)
    created_at = Column(
        TIMESTAMP(timezone=True), server_default=func.now(), nullable=False
    )
    updated_at = Column(
        TIMESTAMP(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False
    )

    # A document belongs to one profile.
    profile = relationship("Profile", back_populates="documents")

    # A document can have many dismissals.
    dismissals = relationship(
        "DismissedSuggestion",
        back_populates="document",
        cascade="all, delete-orphan"
    )

    # A document can have many versions.
    versions = relationship(
        "DocumentVersion",
        back_populates="document",
        cascade="all, delete-orphan"
    )

class DismissedSuggestion(Base):
    """
    Stores a record of a user dismissing a specific type of suggestion
    within a specific document.
    """
    __tablename__ = "dismissed_suggestions"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    profile_id = Column(
        UUID(as_uuid=True),
        ForeignKey("profiles.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )
    document_id = Column(
        UUID(as_uuid=True),
        ForeignKey("documents.id", ondelete="CASCADE"),
        nullable=False
    )

    # The stable fingerprint, e.g., "Its|grammar:its_vs_its"
    dismissal_identifier = Column(Text, nullable=False)
    created_at = Column(
        TIMESTAMP(timezone=True), server_default=func.now(), nullable=False
    )

    # A dismissal belongs to one document.
    document = relationship("Document", back_populates="dismissals")

    # Define a unique constraint to prevent duplicate dismissals.
    __table_args__ = (
        UniqueConstraint(
            'profile_id',
            'document_id',
            'dismissal_identifier',
            name='_profile_doc_dismissal_uc'
        ),
    )

class DocumentVersion(Base):
    """
    Stores historical versions of a document.
    Each time a document is updated, the previous content is archived here.
    """
    __tablename__ = "document_versions"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    document_id = Column(
        UUID(as_uuid=True),
        ForeignKey("documents.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )
    content = Column(Text)  # The content of the document at this point in time
    saved_at = Column(
        TIMESTAMP(timezone=True), server_default=func.now(), nullable=False
    )

    # A version belongs to one document.
    document = relationship("Document", back_populates="versions")

